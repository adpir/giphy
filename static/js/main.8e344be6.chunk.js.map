{"version":3,"sources":["components/AddCategories/index.js","components/Helpers/getGifs.js","components/GifGridItems/index.js","components/GifGrid/index.js","hooks/useFetchGifts.js","GifExpertApp/index.js","index.js"],"names":["AddCategories","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categ","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","giphy","map","img","id","title","images","downsized_medium","GifGridItems","console","log","className","src","alt","GifGrid","loading","state","Setstate","useEffect","then","imgs","useFetchGifts","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mLAGaA,EAAgB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAK,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SApBa,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DAEJ,mCACTC,EAHa,iDAGmCC,UAAUH,GAH7C,4BAEJ,oCAFI,SAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KACFC,EAAQD,EAAKE,KAAI,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAaZM,GAbY,4CAAH,sDCCPO,EAAe,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEtC,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAEnB,sBAAKgB,UAAU,8CAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCFHS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SACtB,ECHyB,SAACA,GAC1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAU,WAEN1B,EAAQC,GACH0B,MAAK,SAAAC,GAEFH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAKtB,CAACtB,IAEGuB,EDjB2BK,CAAc5B,GAAlCa,EAAd,EAAQN,KAAce,EAAtB,EAAsBA,QAEtB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAoDlB,EAApD,OACCsB,GAAW,mBAAGJ,UAAU,4BAAb,qBACZ,qBAAKA,UAAU,YAAf,SAEQL,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEZtB,SAASkB,IACpB,MAAoC3C,mBAAS,CAAC,QAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAGA,OACI,qCACI,oBAAIiC,UAAU,oCAAd,sBACA,cAAC,EAAD,CAAejC,cAAeA,IAE9B,6BAEQ6C,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,W,MCXjC+B,IAASC,OACP,cAACH,EAAD,IACAI,SAASC,eAAe,W","file":"static/js/main.8e344be6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategories = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputValue = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories(categ => [inputValue, ...categ]);\n            setInputValue('');\n        }\n\n    }\n\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputValue}\n            />\n\n        </form>\n    )\n\n}\nAddCategories.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\nexport const getGifs = async (category) => {\n\n    const apiKey = '0B8NGW8tHOa0hMTHk4pzP4PdSlTG40gS';\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=9&api_key=${apiKey}`\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const giphy = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n    return giphy;\n\n}\n\n","import React from 'react'\n\nexport const GifGridItems = ({ id, title, url }) => {\n    console.log(id, title, url);\n    return (\n        <div className=\"card animate__animated animate__fadeInRight\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifts } from '../../hooks/useFetchGifts';\nimport { GifGridItems } from '../GifGridItems';\n\n\nexport const GifGrid = ({ category }) => {\n    const { data: images, loading } = useFetchGifts(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\n            {loading && <p className=\"animate__animated__fadeIn\">Loading</p>}\n            <div className=\"card-grid\">\n                {\n                    images.map(img => (\n                        <GifGridItems\n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n\n\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../components/Helpers/getGifs';\n\nexport const useFetchGifts = (category) => {\n    const [state, Setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n\n        getGifs(category)\n            .then(imgs => {\n\n                Setstate({\n                    data: imgs,\n                    loading: false\n                });\n            });\n\n\n    }, [category])\n\n    return state;\n\n}\n\n\n\n","import React, { useState } from 'react';\nimport { AddCategories } from '../components/AddCategories';\nimport { GifGrid } from '../components/GifGrid/index';\n\nexport default function GifExpertApp() {\n    const [categories, setCategories] = useState(['Fun']);\n\n\n    return (\n        <>\n            <h1 className=\"animate__animated animate__zoomIn\">FunGiphy</h1>\n            <AddCategories setCategories={setCategories} />\n\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid\n                            key={category}\n                            category={category}\n                        />\n                    ))\n                }\n            </ol>\n        </ >\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}